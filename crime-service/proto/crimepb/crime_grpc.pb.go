// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: crime.proto

package crimepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrimeService_GetAllCrimes_FullMethodName         = "/crimebroker.CrimeService/GetAllCrimes"
	CrimeService_SubmitNewCrimeReport_FullMethodName = "/crimebroker.CrimeService/SubmitNewCrimeReport"
	CrimeService_UpdateCrime_FullMethodName          = "/crimebroker.CrimeService/UpdateCrime"
	CrimeService_DeleteCrime_FullMethodName          = "/crimebroker.CrimeService/DeleteCrime"
)

// CrimeServiceClient is the client API for CrimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrimeServiceClient interface {
	// function the system has
	GetAllCrimes(ctx context.Context, in *GetCrimesRequest, opts ...grpc.CallOption) (*GetCrimesResponse, error)
	SubmitNewCrimeReport(ctx context.Context, in *CrimeReportRequest, opts ...grpc.CallOption) (*CrimeResponse, error)
	UpdateCrime(ctx context.Context, in *UpdateCrimeReportRequest, opts ...grpc.CallOption) (*CrimeResponse, error)
	DeleteCrime(ctx context.Context, in *DeleteCrimeRequest, opts ...grpc.CallOption) (*CrimeResponse, error)
}

type crimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrimeServiceClient(cc grpc.ClientConnInterface) CrimeServiceClient {
	return &crimeServiceClient{cc}
}

func (c *crimeServiceClient) GetAllCrimes(ctx context.Context, in *GetCrimesRequest, opts ...grpc.CallOption) (*GetCrimesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrimesResponse)
	err := c.cc.Invoke(ctx, CrimeService_GetAllCrimes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimeServiceClient) SubmitNewCrimeReport(ctx context.Context, in *CrimeReportRequest, opts ...grpc.CallOption) (*CrimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrimeResponse)
	err := c.cc.Invoke(ctx, CrimeService_SubmitNewCrimeReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimeServiceClient) UpdateCrime(ctx context.Context, in *UpdateCrimeReportRequest, opts ...grpc.CallOption) (*CrimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrimeResponse)
	err := c.cc.Invoke(ctx, CrimeService_UpdateCrime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimeServiceClient) DeleteCrime(ctx context.Context, in *DeleteCrimeRequest, opts ...grpc.CallOption) (*CrimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrimeResponse)
	err := c.cc.Invoke(ctx, CrimeService_DeleteCrime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrimeServiceServer is the server API for CrimeService service.
// All implementations must embed UnimplementedCrimeServiceServer
// for forward compatibility.
type CrimeServiceServer interface {
	// function the system has
	GetAllCrimes(context.Context, *GetCrimesRequest) (*GetCrimesResponse, error)
	SubmitNewCrimeReport(context.Context, *CrimeReportRequest) (*CrimeResponse, error)
	UpdateCrime(context.Context, *UpdateCrimeReportRequest) (*CrimeResponse, error)
	DeleteCrime(context.Context, *DeleteCrimeRequest) (*CrimeResponse, error)
	mustEmbedUnimplementedCrimeServiceServer()
}

// UnimplementedCrimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrimeServiceServer struct{}

func (UnimplementedCrimeServiceServer) GetAllCrimes(context.Context, *GetCrimesRequest) (*GetCrimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCrimes not implemented")
}
func (UnimplementedCrimeServiceServer) SubmitNewCrimeReport(context.Context, *CrimeReportRequest) (*CrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewCrimeReport not implemented")
}
func (UnimplementedCrimeServiceServer) UpdateCrime(context.Context, *UpdateCrimeReportRequest) (*CrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrime not implemented")
}
func (UnimplementedCrimeServiceServer) DeleteCrime(context.Context, *DeleteCrimeRequest) (*CrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrime not implemented")
}
func (UnimplementedCrimeServiceServer) mustEmbedUnimplementedCrimeServiceServer() {}
func (UnimplementedCrimeServiceServer) testEmbeddedByValue()                      {}

// UnsafeCrimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrimeServiceServer will
// result in compilation errors.
type UnsafeCrimeServiceServer interface {
	mustEmbedUnimplementedCrimeServiceServer()
}

func RegisterCrimeServiceServer(s grpc.ServiceRegistrar, srv CrimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedCrimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrimeService_ServiceDesc, srv)
}

func _CrimeService_GetAllCrimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeServiceServer).GetAllCrimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrimeService_GetAllCrimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeServiceServer).GetAllCrimes(ctx, req.(*GetCrimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrimeService_SubmitNewCrimeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrimeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeServiceServer).SubmitNewCrimeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrimeService_SubmitNewCrimeReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeServiceServer).SubmitNewCrimeReport(ctx, req.(*CrimeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrimeService_UpdateCrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrimeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeServiceServer).UpdateCrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrimeService_UpdateCrime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeServiceServer).UpdateCrime(ctx, req.(*UpdateCrimeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrimeService_DeleteCrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeServiceServer).DeleteCrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrimeService_DeleteCrime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeServiceServer).DeleteCrime(ctx, req.(*DeleteCrimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrimeService_ServiceDesc is the grpc.ServiceDesc for CrimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crimebroker.CrimeService",
	HandlerType: (*CrimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCrimes",
			Handler:    _CrimeService_GetAllCrimes_Handler,
		},
		{
			MethodName: "SubmitNewCrimeReport",
			Handler:    _CrimeService_SubmitNewCrimeReport_Handler,
		},
		{
			MethodName: "UpdateCrime",
			Handler:    _CrimeService_UpdateCrime_Handler,
		},
		{
			MethodName: "DeleteCrime",
			Handler:    _CrimeService_DeleteCrime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crime.proto",
}
